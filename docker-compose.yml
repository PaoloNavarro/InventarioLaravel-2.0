# docker-compose.yml (Solo para Desarrollo Local)
services:
  app:
    # Construye la imagen usando tu Dockerfile local.
    build: .
    container_name: laravel_app_local
    ports:
      - "8080:80"
    volumes:
      # Montamos el código local. Esto SOBRESCRIBE el 'COPY' del Dockerfile.
      # Útil para ver cambios al instante sin reconstruir la imagen.
      - ./:/app
    environment:
      - WEB_DOCUMENT_ROOT=/app/public
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - PHP_DISPLAY_ERRORS=${PHP_DISPLAY_ERRORS:-1}
      - PHP_MEMORY_LIMIT=${PHP_MEMORY_LIMIT:-512M}
      - APP_KEY=${APP_KEY}
    depends_on:
      db:
        condition: service_healthy
    # No necesitamos un 'command' aquí porque el 'ENTRYPOINT' en el Dockerfile
    # ya se encarga de iniciar PHP-FPM y Nginx.
    # Los permisos también se manejan ahora que el volumen está montado.
    # Si aún tuvieras problemas de permisos con el volumen montado, podrías añadir un 'command'
    # como: command: sh -c "chown -R application:application /app/storage /app/bootstrap/cache && /usr/local/bin/docker-entrypoint.sh php-fpm"
    # Pero intentemos sin él primero, ya que el ENTRYPOINT es más limpio.

  db:
    image: mysql:8.0
    container_name: laravel_db_local
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    command: --log-bin-trust-function-creators=1

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data: